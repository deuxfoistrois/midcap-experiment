#!/usr/bin/env python3
import os
import json
import requests
import pandas as pd
from datetime import datetime, timedelta
import alpaca_trade_api as tradeapi

def get_alpaca_client():
    """Initialize Alpaca client"""
    api_key = os.environ.get('ALPACA_API_KEY')
    secret_key = os.environ.get('ALPACA_SECRET_KEY')
    base_url = os.environ.get('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')
    
    if not api_key or not secret_key:
        raise ValueError("Alpaca API credentials not found in environment variables")
    
    return tradeapi.REST(api_key, secret_key, base_url, api_version='v2')

def sync_portfolio_with_alpaca():
    """Complete portfolio sync with Alpaca"""
    try:
        print("=== Portfolio Sync Starting ===")
        
        # Initialize Alpaca client
        api = get_alpaca_client()
        
        # Get account info
        account = api.get_account()
        print(f"Connected! Account status: {account.status}")
        
        # Get current positions from Alpaca
        positions = api.list_positions()
        current_symbols = [pos.symbol for pos in positions]
        print(f"Current positions: {current_symbols}")
        
        # Define experiment symbols
        experiment_symbols = ['CRNX', 'STRL', 'OTEX', 'ZION']
        
        # Check for missing positions (stop losses)
        missing_positions = set(experiment_symbols) - set(current_symbols)
        if missing_positions:
            for symbol in missing_positions:
                print(f"üö® {symbol} STOP LOSS DETECTED - Position not found in account")
        
        # Build experiment positions data
        experiment_positions = {}
        positions_value = 0.0
        
        for pos in positions:
            if pos.symbol in experiment_symbols:
                current_price = float(pos.market_value) / float(pos.qty)
                position_data = {
                    "symbol": pos.symbol,
                    "shares": float(pos.qty),
                    "entry_price": float(pos.avg_entry_price) if pos.avg_entry_price else current_price,
                    "current_price": current_price,
                    "market_value": float(pos.market_value),
                    "unrealized_pnl": float(pos.unrealized_pl),
                    "unrealized_pnl_pct": float(pos.unrealized_plpc),
                    "cost_basis": float(pos.cost_basis) if pos.cost_basis else float(pos.qty) * float(pos.avg_entry_price),
                    "last_update": datetime.now().isoformat()
                }
                experiment_positions[pos.symbol] = position_data
                positions_value += float(pos.market_value)
        
        # Get cash balance
        cash_value = float(account.cash)
        
        # Calculate total portfolio value
        full_portfolio_value = positions_value + cash_value
        
        # Calculate returns (assuming $1000 baseline)
        baseline_investment = 1000.0
        experiment_return = full_portfolio_value - baseline_investment
        return_pct = (experiment_return / baseline_investment) * 100
        
        print(f"Experiment symbols: {experiment_symbols}")
        print(f"Baseline investment: ${baseline_investment}")
        print(f"Experiment Portfolio (positions only): ${positions_value:.2f}")
        print(f"Experiment Cash: ${cash_value:,.2f}")
        print(f"Total Experiment Value: ${full_portfolio_value:,.2f}")
        print(f"Return: ${experiment_return:,.2f} ({return_pct:.2f}%)")
        
        # Create portfolio data structure
        portfolio_data = {
            "positions": experiment_positions,
            "cash": cash_value,
            "portfolio_value": full_portfolio_value,
            "total_invested": baseline_investment,
            "total_return": experiment_return,
            "total_return_pct": return_pct / 100,
            "positions_count": len(experiment_positions),
            "last_update": datetime.now().isoformat(),
            "experiment_start": "2025-09-08T00:00:00"
        }
        
        # Save to latest.json
        os.makedirs('data', exist_ok=True)
        with open('data/latest.json', 'w') as f:
            json.dump(portfolio_data, f, indent=2)
        
        # Update portfolio history CSV
        csv_data = {
            'date': datetime.now().strftime('%Y-%m-%d'),
            'portfolio_value': full_portfolio_value,
            'cash': cash_value,
            'positions_value': positions_value,
            'total_invested': baseline_investment,
            'total_return': experiment_return,
            'total_return_pct': return_pct / 100,
            'positions_count': len(experiment_positions)
        }
        
        # Add individual position data
        for symbol in experiment_symbols:
            if symbol in experiment_positions:
                pos = experiment_positions[symbol]
                csv_data[f'{symbol}_price'] = pos['current_price']
                csv_data[f'{symbol}_pnl'] = pos['unrealized_pnl']
                csv_data[f'{symbol}_pnl_pct'] = pos['unrealized_pnl_pct']
            else:
                # Position was sold (stop loss)
                csv_data[f'{symbol}_price'] = None
                csv_data[f'{symbol}_pnl'] = None
                csv_data[f'{symbol}_pnl_pct'] = None
        
        # Append to CSV
        df_new = pd.DataFrame([csv_data])
        csv_file = 'data/portfolio_history.csv'
        
        if os.path.exists(csv_file):
            df_existing = pd.read_csv(csv_file)
            # Remove today's entry if it exists
            df_existing = df_existing[df_existing['date'] != csv_data['date']]
            df_combined = pd.concat([df_existing, df_new], ignore_index=True)
        else:
            df_combined = df_new
        
        df_combined.to_csv(csv_file, index=False)
        
        print("‚úÖ Portfolio sync completed successfully")
        print(f"‚úÖ Updated files: data/latest.json, data/portfolio_history.csv")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Error during portfolio sync: {e}")
        import traceback
        traceback.print_exc()
        return False

if __name__ == "__main__":
    success = sync_portfolio_with_alpaca()
    if not success:
        exit(1)
