name: Sync Portfolio with Alpaca

on:
  schedule:
    # Run every 15 minutes during market hours (9:30 AM - 4:00 PM ET)
    - cron: '*/15 14-21 * * 1-5'  # Monday-Friday, 2:30 PM - 9:00 PM UTC (9:30 AM - 4:00 PM ET)
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install requests
    
    - name: Sync Portfolio Data
      env:
        APCA_API_KEY_ID: ${{ secrets.ALPACA_API_KEY }}
        APCA_API_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        APCA_API_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        python3 << 'EOF'
        import requests
        import json
        from datetime import datetime
        import os
        
        print("=== Portfolio Sync Starting ===")
        
        # Get credentials
        api_key = os.environ.get('APCA_API_KEY_ID')
        api_secret = os.environ.get('APCA_API_SECRET_KEY') 
        base_url = os.environ.get('APCA_API_BASE_URL')
        
        if not all([api_key, api_secret, base_url]):
            print("ERROR: Missing credentials")
            exit(1)
        
        print(f"Connecting to: {base_url}")
        
        # Authentication headers
        headers = {
            "APCA-API-KEY-ID": api_key,
            "APCA-API-SECRET-KEY": api_secret,
            "Content-Type": "application/json"
        }
        
        # Test connection
        account_response = requests.get(f"{base_url}/v2/account", headers=headers)
        if account_response.status_code != 200:
            print(f"Auth failed: {account_response.status_code}")
            exit(1)
        
        account = account_response.json()
        print(f"Connected! Account status: {account['status']}")
        
        # Get positions
        positions_response = requests.get(f"{base_url}/v2/positions", headers=headers)
        if positions_response.status_code != 200:
            print(f"Positions failed: {positions_response.status_code}")
            exit(1)
        
        positions = positions_response.json()
        symbols = [pos['symbol'] for pos in positions]
        print(f"Current positions: {symbols}")
        
        # Check if CRNX missing (stop loss triggered)
        crnx_missing = 'CRNX' not in symbols
        if crnx_missing:
            print("ðŸš¨ CRNX STOP LOSS DETECTED - Position not found in account")
        
        # Get baseline investment
        try:
            with open('docs/latest.json', 'r') as f:
                existing = json.load(f)
            baseline = existing.get('total_invested', 1000.0)
        except:
            baseline = 1000.0
        
        # Calculate portfolio metrics
        portfolio_value = float(account['portfolio_value'])
        cash = float(account['cash'])
        total_return = portfolio_value - baseline
        return_pct = total_return / baseline
        
        print(f"Portfolio: ${portfolio_value:,.2f}")
        print(f"Cash: ${cash:,.2f}")
        print(f"Return: ${total_return:,.2f} ({return_pct*100:.2f}%)")
        
        # Build portfolio data
        portfolio_data = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "portfolio_value": portfolio_value,
            "cash": cash,
            "positions_value": portfolio_value - cash,
            "total_invested": baseline,
            "total_return": total_return,
            "total_return_pct": return_pct,
            "positions_count": len(positions),
            "data_source": "Alpaca",
            "positions": {},
            "alpaca_portfolio_value": portfolio_value,
            "alpaca_cash": cash,
            "alpaca_buying_power": float(account['buying_power']),
            "account_status": account['status']
        }
        
        # Process positions with robust field handling
        catalysts = {
            "CRNX": "FDA PDUFA September 25",
            "STRL": "Q3 Earnings October", 
            "OTEX": "Q1 FY2025 Earnings Oct 31",
            "ZION": "Q3 Earnings + Fed Cuts"
        }
        
        for pos in positions:
            symbol = pos['symbol']
            
            # Debug: show available fields
            print(f"Processing {symbol}, fields: {list(pos.keys())}")
            
            # Find cost basis field (try multiple names)
            cost_basis = 0
            for field in ['avg_cost_basis', 'cost_basis', 'avg_entry_price']:
                if field in pos:
                    cost_basis = float(pos[field])
                    break
            
            # Find current price field
            current_price = 0
            for field in ['current_price', 'market_price', 'price']:
                if field in pos:
                    current_price = float(pos[field])
                    break
            
            portfolio_data["positions"][symbol] = {
                "shares": float(pos['qty']),
                "entry_price": cost_basis,
                "current_price": current_price,
                "market_value": float(pos['market_value']),
                "unrealized_pnl": float(pos['unrealized_pl']),
                "unrealized_pnl_pct": float(pos['unrealized_plpc']),
                "stop_level": 0,
                "stop_type": "trailing",
                "catalyst": catalysts.get(symbol, "N/A")
            }
            
            print(f"âœ“ {symbol}: {pos['qty']} shares @ ${current_price}")
        
        # Save file
        with open('docs/latest.json', 'w') as f:
            json.dump(portfolio_data, f, indent=2)
        
        print("=== Portfolio Data Updated Successfully ===")
        print(f"Final positions: {list(portfolio_data['positions'].keys())}")
        
        if crnx_missing:
            print("ðŸŽ¯ CRNX removed from portfolio data (stop loss confirmed)")
        
        EOF
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action Portfolio Sync"
        git add docs/latest.json
        if git diff --staged --quiet; then
          echo "No changes to commit"
        else
          git commit -m "Auto-sync: Portfolio updated from Alpaca API"
          git push
          echo "Changes committed and pushed"
        fi
