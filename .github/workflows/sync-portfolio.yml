name: Portfolio Sync with Alpaca

on:
  schedule:
    - cron: '25 21 * * 1-5'  # 5 minutes before midcap_schedule
  workflow_dispatch:

jobs:
  sync-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
        
    - name: Install dependencies
      run: |
        pip install pandas requests alpaca-py
        
    - name: Run portfolio sync
      env:
        ALPACA_API_KEY: ${{ secrets.ALPACA_API_KEY }}
        ALPACA_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        ALPACA_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        python3 << 'EOF'
        import os
        import json
        import pandas as pd
        from datetime import datetime
        from alpaca.trading.client import TradingClient

        print("=== Portfolio Sync Starting ===")

        # Initialize Alpaca client
        api_key = os.environ.get('ALPACA_API_KEY')
        secret_key = os.environ.get('ALPACA_SECRET_KEY')
        base_url = os.environ.get('ALPACA_BASE_URL', 'https://paper-api.alpaca.markets')

        print(f"Connecting to: {base_url}")
        client = TradingClient(api_key, secret_key, paper=True)
        account = client.get_account()
        print(f"Connected! Account status: {account.status}")

        # Get current positions from Alpaca
        positions = client.get_all_positions()
        current_symbols = [pos.symbol for pos in positions if pos.symbol in ['CRNX', 'STRL', 'OTEX', 'ZION']]
        print(f"Current positions: {current_symbols}")

        # Load existing portfolio data
        with open('docs/latest.json', 'r') as f:
            existing_portfolio = json.load(f)

        # Calculate positions value - FIXED: Convert all string values to float
        positions_value = 0.0
        for pos in positions:
            if pos.symbol in ['CRNX', 'STRL', 'OTEX', 'ZION']:
                positions_value += float(pos.market_value)
        
        print(f"Positions Value: ${positions_value:.2f}")

        # Handle CRNX stop loss
        experiment_cash = 24.52
        if 'CRNX' not in current_symbols:
            print("CRNX not in current positions - stop loss already executed")
            print("Adding CRNX sale proceeds: $268.64")
            experiment_cash += 268.64

        print(f"Experiment Cash: ${experiment_cash:.2f}")

        # Calculate totals
        total_experiment_value = positions_value + experiment_cash
        baseline_investment = 1000.0
        total_return = total_experiment_value - baseline_investment
        total_return_pct = total_return / baseline_investment

        print(f"Total Value: ${total_experiment_value:.2f}")
        print(f"Total Return: ${total_return:.2f} ({total_return_pct:.2%})")

        # Update positions in portfolio data - FIXED: Convert all values to float
        updated_positions = {}
        for pos in positions:
            if pos.symbol in ['CRNX', 'STRL', 'OTEX', 'ZION']:
                # Get existing position data for catalyst info
                existing_pos = existing_portfolio.get('positions', {}).get(pos.symbol, {})
                
                qty = float(pos.qty)
                market_value = float(pos.market_value)
                
                updated_positions[pos.symbol] = {
                    "symbol": pos.symbol,
                    "shares": qty,
                    "entry_price": float(pos.avg_entry_price) if pos.avg_entry_price else float(existing_pos.get('entry_price', 0)),
                    "current_price": market_value / qty,
                    "market_value": market_value,
                    "cost_basis": float(pos.cost_basis),
                    "unrealized_pnl": float(pos.unrealized_pnl),
                    "unrealized_pnl_pct": float(pos.unrealized_plpc),
                    "catalyst": existing_pos.get('catalyst', 'No catalyst'),
                    "last_update": datetime.now().isoformat()
                }

        # Update JSON file
        portfolio_data = {
            "positions": updated_positions,
            "cash": experiment_cash,
            "portfolio_value": total_experiment_value,
            "total_invested": baseline_investment,
            "total_return": total_return,
            "total_return_pct": total_return_pct,
            "positions_count": len(updated_positions),
            "last_update": datetime.now().isoformat(),
            "experiment_start": existing_portfolio.get("experiment_start", "2025-09-08T00:00:00")
        }

        with open('docs/latest.json', 'w') as f:
            json.dump(portfolio_data, f, indent=2)

        # Update CSV file - safer approach
        try:
            df = pd.read_csv('data/portfolio_history.csv')
            
            # Check if 2025-09-19 exists in the data
            target_date = '2025-09-19'
            if target_date in df['date'].values:
                print(f"Updating existing entry for {target_date}")
                # Update the specific row
                mask = df['date'] == target_date
                df.loc[mask, 'cash'] = experiment_cash
                df.loc[mask, 'portfolio_value'] = total_experiment_value
                df.loc[mask, 'total_return'] = total_return
                df.loc[mask, 'total_return_pct'] = total_return_pct
                df.loc[mask, 'positions_count'] = len(updated_positions)
            else:
                print(f"Date {target_date} not found in CSV, skipping update")
                
            df.to_csv('data/portfolio_history.csv', index=False)
            print("CSV updated successfully")
            
        except Exception as e:
            print(f"CSV update failed: {e}")
            print("Continuing without CSV update")

        print("Portfolio sync completed successfully")
        EOF

    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/latest.json data/portfolio_history.csv
        git commit -m "Update portfolio data - $(date)" || exit 0
        git push
