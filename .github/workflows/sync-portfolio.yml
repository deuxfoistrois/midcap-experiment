name: Sync Portfolio with Alpaca

on:
  schedule:
    # Run every 15 minutes during market hours (9:30 AM - 4:00 PM ET)
    - cron: '*/15 14-21 * * 1-5'  # Monday-Friday, 2:30 PM - 9:00 PM UTC (9:30 AM - 4:00 PM ET)
  workflow_dispatch:  # Allows manual triggering

jobs:
  sync-portfolio:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        pip install alpaca-trade-api requests
    
    - name: Sync Portfolio Data
      env:
        APCA_API_KEY_ID: ${{ secrets.ALPACA_API_KEY }}
        APCA_API_SECRET_KEY: ${{ secrets.ALPACA_SECRET_KEY }}
        APCA_API_BASE_URL: ${{ secrets.ALPACA_BASE_URL }}
      run: |
        python - << 'EOF'
        import alpaca_trade_api as tradeapi
        import json
        from datetime import datetime
        import os
        
        # Debug: Check environment variables (without revealing actual values)
        print("Checking environment variables:")
        print(f"APCA_API_KEY_ID exists: {'APCA_API_KEY_ID' in os.environ}")
        print(f"APCA_API_SECRET_KEY exists: {'APCA_API_SECRET_KEY' in os.environ}")
        print(f"APCA_API_BASE_URL exists: {'APCA_API_BASE_URL' in os.environ}")
        if 'APCA_API_BASE_URL' in os.environ:
            print(f"Base URL: {os.environ['APCA_API_BASE_URL']}")
        
        # Initialize Alpaca API - it will automatically use APCA_* environment variables
        try:
            api = tradeapi.REST()
            print("Alpaca API client created successfully")
        except Exception as e:
            print(f"Error creating API client: {e}")
            exit(1)
        
        def get_catalyst_for_symbol(symbol):
            catalysts = {
                "CRNX": "FDA PDUFA September 25",
                "STRL": "Q3 Earnings October", 
                "OTEX": "Q1 FY2025 Earnings Oct 31",
                "ZION": "Q3 Earnings + Fed Cuts"
            }
            return catalysts.get(symbol, "N/A")
        
        # Test API connection
        try:
            print("Testing API connection...")
            account = api.get_account()
            print(f"Account status: {account.status}")
            print("API connection successful")
        except Exception as e:
            print(f"API connection failed: {e}")
            print("Please verify your Alpaca API credentials in GitHub secrets")
            exit(1)
        
        # Get current portfolio
        positions = api.list_positions()
        print(f"Found {len(positions)} positions in Alpaca account")
        
        # Read existing data to preserve order history and calculations
        try:
            with open('docs/latest.json', 'r') as f:
                existing_data = json.load(f)
            
            # Preserve the baseline investment amount and previous calculations
            baseline_investment = existing_data.get('total_invested', 1000.0)
            
            # Get current Alpaca portfolio state
            current_portfolio_value = float(account.portfolio_value)
            current_cash = float(account.cash)
            current_positions_value = sum(float(pos.market_value) for pos in positions)
            
            # Calculate returns based on original investment
            total_return = current_portfolio_value - baseline_investment
            total_return_pct = total_return / baseline_investment if baseline_investment > 0 else 0
            
        except (FileNotFoundError, KeyError, json.JSONDecodeError):
            # Fallback: analyze the situation from current state
            print("Could not read existing data, inferring from current state")
            current_portfolio_value = float(account.portfolio_value)
            current_cash = float(account.cash)
            current_positions_value = sum(float(pos.market_value) for pos in positions)
            baseline_investment = current_portfolio_value  # Assume this is starting point
            total_return = 0
            total_return_pct = 0
        
        portfolio_data = {
            "date": datetime.now().strftime("%Y-%m-%d"),
            "portfolio_value": current_portfolio_value,
            "cash": current_cash,
            "positions_value": current_positions_value,
            "total_invested": baseline_investment,
            "total_return": total_return,
            "total_return_pct": total_return_pct,
            "positions_count": len(positions),
            "data_source": "Alpaca",
            "positions": {},
            "alpaca_portfolio_value": current_portfolio_value,
            "alpaca_cash": current_cash,
            "alpaca_buying_power": float(account.buying_power),
            "account_status": account.status
        }
        
        # Add positions
        for position in positions:
            symbol = position.symbol
            portfolio_data["positions"][symbol] = {
                "shares": float(position.qty),
                "entry_price": float(position.avg_cost_basis),
                "current_price": float(position.current_price),
                "market_value": float(position.market_value),
                "unrealized_pnl": float(position.unrealized_pl),
                "unrealized_pnl_pct": float(position.unrealized_plpc),
                "stop_level": 0,
                "stop_type": "trailing",
                "catalyst": get_catalyst_for_symbol(symbol)
            }
        
        # Write to file
        with open('docs/latest.json', 'w') as f:
            json.dump(portfolio_data, f, indent=2)
        
        print("Portfolio data updated successfully")
        print(f"Found {len(positions)} positions")
        for pos in positions:
            print(f"  {pos.symbol}: {pos.qty} shares")
        EOF
    
    - name: Commit changes
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add docs/latest.json
        git diff --staged --quiet || git commit -m "Auto-update portfolio data from Alpaca"
        git push
